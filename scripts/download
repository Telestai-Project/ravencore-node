#!/usr/bin/env bash

set -e

root_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
platform=`uname -a | awk '{print tolower($1)}'`
arch=`uname -m`
url="https://github.com/telestai-project/telestai/releases/download"
version="1t.0.0"
tag="1t.0.0"

if [[ "${platform}" == "linux" ]]; then
    if [[ "${arch}" == "x86_64" ]]; then
        # e.g. raven-4.1.0.0-x86_64-linux-gnu.tar.gz
        archive_name="raven-1t.0.0-0000c00f0-amd64.tar.gz"
    elif [[ "${arch}" =~ "arm" ]]; then
        # e.g. raven-4.1.0.0-arm-linux-gnueabihf.tar.gz
        archive_name="raven-1t.0.0-0000c00f0-amd64.tar.gz"
    else
        echo "Ravencoin binary distribution not found for linux architecture: ${arch}"
        exit -1
    fi
elif [[ "${platform}" == "darwin" ]]; then
    # e.g. raven-3.3.1.0-osx.dmg
    archive_name="raven-4.1.0.0-osx.dmg"
else
    echo "Ravencoin binary distribution not found for platform and architecture (${platform}/${arch})"
    exit -1
fi

binary_url="${url}/${tag}/${archive_name}"
shasums_url="${url}/${tag}/${archive_name}.sha256sum"

download_ravend() {

    cd "${root_dir}/bin"

    if test -e "ravend"; then
        echo "\"bin/ravend\" already exists -- skipping download."
        return;
    fi

    echo "Downloading ravencoin: ${binary_url}"

    is_curl=true
    if hash curl 2>/dev/null; then
        curl --fail -I $binary_url >/dev/null 2>&1
    else
        is_curl=false
        wget --server-response --spider $binary_url >/dev/null 2>&1
    fi

    if test $? -eq 0; then
        if [ "${is_curl}" = true ]; then
            curl -L $binary_url > $archive_name
            curl -L $shasums_url > SHA256SUMS.asc
        else
            wget $binary_url
            wget $shasums_url
        fi
        if test -e "${archive_name}"; then
            echo "Unpacking ravencoin distribution"
            if [[ "${platform}" == "linux" ]]; then            
                tar -xvzf $archive_name
                if test $? -eq 0; then
                    ln -sf "raven-${version}/bin/ravend"
                    return;
                fi
            elif [[ "${platform}" == "darwin" ]]; then
                hdiutil mount $archive_name
                if test $? -eq 0; then
                    cp /Volumes/Raven\ Core/Raven-Qt.app/Contents/MacOS/ravend .
                    hdiutil unmount /Volumes/Raven\ Core
                    return;
                fi
            fi
        fi
    fi
    echo "Ravencoin binary distribution could not be downloaded"
    exit -1
}

verify_download() {
    echo "Verifying signatures of ravencoin download"
    gpg --verify "${root_dir}/bin/SHA256SUMS.asc"

    if hash shasum 2>/dev/null; then
        shasum_cmd="shasum -a 256"
    else
        shasum_cmd="sha256sum"
    fi

    download_sha=$(${shasum_cmd} "${root_dir}/bin/${archive_name}" | awk '{print $1}')
    expected_sha=$(cat "${root_dir}/bin/SHA256SUMS.asc" | grep "${archive_name}" | awk '{print $1}')
    echo "Checksum (download): ${download_sha}"
    echo "Checksum (verified): ${expected_sha}"
    if [ "${download_sha}" != "${expected_sha}" ]; then
        echo -e "\033[1;31mChecksums did NOT match!\033[0m\n"
        exit 1
    else
        echo -e "\033[1;32mChecksums matched!\033[0m\n"
    fi
}

download=1
verify=0

if [ "${SKIP_RAVENCOIN_DOWNLOAD}" = 1 ]; then
    download=0;
fi

if [ "${VERIFY_RAVENCOIN_DOWNLOAD}" = 1 ]; then
    verify=1;
fi

while [ -n "$1" ]; do
  param="$1"
  value="$2"

  case $param in
    --skip-ravencoin-download)
          download=0
          ;;
    --verify-ravencoin-download)
          verify=1
          ;;
  esac
  shift
done

if [ "${download}" = 1 ]; then
    download_ravend
fi

if [ "${verify}" = 1 ]; then
    verify_download
fi

exit 0
